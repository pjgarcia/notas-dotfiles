* 0x200 Programming
  + objdump -D -M intel a.out :: disassembly (-D) con formato Intel (-M intel)
  + gdb -q ./a.out :: debugger para ver el estado de la memoria y los registros al momento de ejecucion. No imprime
		      mensajes introductorios ni la licencia (-q o -quiet)
    + help <command> :: ayuda sobre el comando
    + break main :: pone un breakpoint en el label "main"
    + info registers :: imprime informacion sobre los registros en el momento actual de ejecucion
    + info register eip (short i r eip) :: informacion particularmente sobre el EIP
    + set disassembly-flavor intel :: cambia el formato de AT&T a Intel
    + list :: si fue compilado con *-g*, muestra el codigo fuente del programa
	      puede tomar argumentos como el #linea, nombre de la funcion, etc.
    + disassemble main :: desensambla la funcion deseada y la muestra
    + x/FORMAT ADRESS :: para *examinar* la memoria. FORMAT puede estar formado por:
      + n :: un numero para indicar la cantidad de "units" a examinar
      + t(binario) | o(octal) | u(decimal sin signo) | x(hexa) :: en que medida mostrar el "unit"
      + b(byte) | h(half word) | w(word default) | g(giant) :: tamanio del "unit"
      Por ejemplo, puede quedar asi: x, 2x, 4xb, etc.
      FORMAT tambien puede tomar valores como *i(instruccion), a(address), c(char), s(string)*.
      ADRESS es una expresion para la direccion de memoria a examinar. $eip o 0x8048384 por ejemplo.
    + print $ebp - 4 :: se usa para matematica simple, y guarda el resultado en una variable, para usarlo luego.
    + run :: corre el programa, parando en los breakpoints (si es que los hay)
    + continue (short cont) :: continua la ejecucion
    + nexti :: ejecutar la actual instruccion.
    + bt [full] o where :: backtrace the call stack. Con 'full' muestra las variables locales del stack frame
    + quit
  + EAX :: accumulator register
  + ECX :: counter register
  + EDX :: data register
  + EBX :: base register
  + ESP :: stack pointer
  + EBP :: base pointer
  + ESI EDI :: source and destination index: used to point to the source and dest when data needs to be read from or written to
  + EIP :: instruction pointer register
  + EFLAGS :: bit flags for comparisons and memory segmentation

  + bc -ql :: basic calculator

  + generalmente, al hacer un llamado a una funcion (call), se reserva un espacio de 0xc en el stack, mas la 
    cantidad de parametros. Por ejemplo, con uno solo, quedaria en 0xc + 0x4 = 0x10. Una vez que se retorna
    de la funcion, se retorna el *stack pointer* a la posicion anterior a eso. (add sp,0x10 en el
    caso anterior)

  + C variable global :: se declara igual a las demas, pero fuera de cualquier funcion
  + C variable estatica :: es local a la funcion en la que se declara, pero se comparte entre todos los 
       llamados a la misma
